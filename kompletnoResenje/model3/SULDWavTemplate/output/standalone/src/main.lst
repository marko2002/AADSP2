1     	 0000					.public _deegreTmp
2     	 0000					.public _gainTmp
3     	 0000					.public _inverter
4     	 0000					.public _sampleBuffer
5     	 0000					.extern _audio_invert_init
6     	 0000					.extern _cl_wavread_bits_per_sample
7     	 0000					.extern _cl_wavread_close
8     	 0000					.extern _cl_wavread_frame_rate
9     	 0000					.extern _cl_wavread_getnchannels
10    	 0000					.extern _cl_wavread_number_of_frames
11    	 0000					.extern _cl_wavread_open
12    	 0000					.extern _cl_wavread_recvsample
13    	 0000					.extern _cl_wavwrite_close
14    	 0000					.extern _cl_wavwrite_open
15    	 0000					.extern _cl_wavwrite_sendsample
16    	 0000					.public _main
17    	 0000					.extern _printf
18    	 0000					.extern _processing
19    	 0000					.extern _strcpy
20    	 0000					.extern __div
21    							.xdata_ovly
21     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
22    	 0000				_deegreTmp
23    	 0000					.dw  (0xf3333333)
	 0000	 F3333333	 
24    							.xdata_ovly
24     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
25    	 0000				_gainTmp
26    	 0000					.dw  (0xccccccc)
	 0000	 0CCCCCCC	 
27    							.xdata_ovly
27     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
28    	 0000				_inverter
29    	 0000					.bss (0x2)
30    							.ydata_ovly
30     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
31    	 0000				_sampleBuffer
32    	 0000					.bss (0x80)
33    							.xdata_ovly
33     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
34    	 0000				_string_const_0
35    	 0000					.dw  (0x2e)
	 0000	 0000002E	 
36    	 0001					.dw  (0x2e)
	 0001	 0000002E	 
37    	 0002					.dw  (0x2f)
	 0002	 0000002F	 
38    	 0003					.dw  (0x2e)
	 0003	 0000002E	 
39    	 0004					.dw  (0x2e)
	 0004	 0000002E	 
40    	 0005					.dw  (0x2f)
	 0005	 0000002F	 
41    	 0006					.dw  (0x2e)
	 0006	 0000002E	 
42    	 0007					.dw  (0x2e)
	 0007	 0000002E	 
43    	 0008					.dw  (0x2f)
	 0008	 0000002F	 
44    	 0009					.dw  (0x54)
	 0009	 00000054	 
45    	 000A					.dw  (0x65)
	 000A	 00000065	 
46    	 000B					.dw  (0x73)
	 000B	 00000073	 
47    	 000C					.dw  (0x74)
	 000C	 00000074	 
48    	 000D					.dw  (0x53)
	 000D	 00000053	 
49    	 000E					.dw  (0x74)
	 000E	 00000074	 
50    	 000F					.dw  (0x72)
	 000F	 00000072	 
51    	 0010					.dw  (0x65)
	 0010	 00000065	 
52    	 0011					.dw  (0x61)
	 0011	 00000061	 
53    	 0012					.dw  (0x6d)
	 0012	 0000006D	 
54    	 0013					.dw  (0x73)
	 0013	 00000073	 
55    	 0014					.dw  (0x2f)
	 0014	 0000002F	 
56    	 0015					.dw  (0x41)
	 0015	 00000041	 
57    	 0016					.dw  (0x6d)
	 0016	 0000006D	 
58    	 0017					.dw  (0x70)
	 0017	 00000070	 
59    	 0018					.dw  (0x5f)
	 0018	 0000005F	 
60    	 0019					.dw  (0x53)
	 0019	 00000053	 
61    	 001A					.dw  (0x77)
	 001A	 00000077	 
62    	 001B					.dw  (0x65)
	 001B	 00000065	 
63    	 001C					.dw  (0x65)
	 001C	 00000065	 
64    	 001D					.dw  (0x70)
	 001D	 00000070	 
65    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
66    	 001F					.dw  (0x77)
	 001F	 00000077	 
67    	 0020					.dw  (0x61)
	 0020	 00000061	 
68    	 0021					.dw  (0x76)
	 0021	 00000076	 
69    	 0022					.dw  (0x0)
	 0022	 00000000	 
70    							.xdata_ovly
70     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
71    	 0000				_string_const_1
72    	 0000					.dw  (0x45)
	 0000	 00000045	 
73    	 0001					.dw  (0x72)
	 0001	 00000072	 
74    	 0002					.dw  (0x72)
	 0002	 00000072	 
75    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
76    	 0004					.dw  (0x72)
	 0004	 00000072	 
77    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
78    	 0006					.dw  (0x20)
	 0006	 00000020	 
79    	 0007					.dw  (0x43)
	 0007	 00000043	 
80    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
81    	 0009					.dw  (0x75)
	 0009	 00000075	 
82    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
83    	 000B					.dw  (0x64)
	 000B	 00000064	 
84    	 000C					.dw  (0x20)
	 000C	 00000020	 
85    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
86    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
87    	 000F					.dw  (0x74)
	 000F	 00000074	 
88    	 0010					.dw  (0x20)
	 0010	 00000020	 
89    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
90    	 0012					.dw  (0x70)
	 0012	 00000070	 
91    	 0013					.dw  (0x65)
	 0013	 00000065	 
92    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
93    	 0015					.dw  (0x20)
	 0015	 00000020	 
94    	 0016					.dw  (0x77)
	 0016	 00000077	 
95    	 0017					.dw  (0x61)
	 0017	 00000061	 
96    	 0018					.dw  (0x76)
	 0018	 00000076	 
97    	 0019					.dw  (0x65)
	 0019	 00000065	 
98    	 001A					.dw  (0x66)
	 001A	 00000066	 
99    	 001B					.dw  (0x69)
	 001B	 00000069	 
100   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
101   	 001D					.dw  (0x65)
	 001D	 00000065	 
102   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
103   	 001F					.dw  (0xa)
	 001F	 0000000A	 
104   	 0020					.dw  (0x0)
	 0020	 00000000	 
105   							.xdata_ovly
105    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
106   	 0000				_string_const_2
107   	 0000					.dw  (0x2e)
	 0000	 0000002E	 
108   	 0001					.dw  (0x2e)
	 0001	 0000002E	 
109   	 0002					.dw  (0x2f)
	 0002	 0000002F	 
110   	 0003					.dw  (0x2e)
	 0003	 0000002E	 
111   	 0004					.dw  (0x2e)
	 0004	 0000002E	 
112   	 0005					.dw  (0x2f)
	 0005	 0000002F	 
113   	 0006					.dw  (0x2e)
	 0006	 0000002E	 
114   	 0007					.dw  (0x2e)
	 0007	 0000002E	 
115   	 0008					.dw  (0x2f)
	 0008	 0000002F	 
116   	 0009					.dw  (0x6f)
	 0009	 0000006F	 
117   	 000A					.dw  (0x75)
	 000A	 00000075	 
118   	 000B					.dw  (0x74)
	 000B	 00000074	 
119   	 000C					.dw  (0x70)
	 000C	 00000070	 
120   	 000D					.dw  (0x75)
	 000D	 00000075	 
121   	 000E					.dw  (0x74)
	 000E	 00000074	 
122   	 000F					.dw  (0x5f)
	 000F	 0000005F	 
123   	 0010					.dw  (0x6d)
	 0010	 0000006D	 
124   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
125   	 0012					.dw  (0x64)
	 0012	 00000064	 
126   	 0013					.dw  (0x65)
	 0013	 00000065	 
127   	 0014					.dw  (0x6c)
	 0014	 0000006C	 
128   	 0015					.dw  (0x33)
	 0015	 00000033	 
129   	 0016					.dw  (0x2e)
	 0016	 0000002E	 
130   	 0017					.dw  (0x77)
	 0017	 00000077	 
131   	 0018					.dw  (0x61)
	 0018	 00000061	 
132   	 0019					.dw  (0x76)
	 0019	 00000076	 
133   	 001A					.dw  (0x0)
	 001A	 00000000	 
134   							.xdata_ovly
134    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
135   	 0000				_string_const_3
136   	 0000					.dw  (0x45)
	 0000	 00000045	 
137   	 0001					.dw  (0x72)
	 0001	 00000072	 
138   	 0002					.dw  (0x72)
	 0002	 00000072	 
139   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
140   	 0004					.dw  (0x72)
	 0004	 00000072	 
141   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
142   	 0006					.dw  (0x20)
	 0006	 00000020	 
143   	 0007					.dw  (0x43)
	 0007	 00000043	 
144   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
145   	 0009					.dw  (0x75)
	 0009	 00000075	 
146   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
147   	 000B					.dw  (0x64)
	 000B	 00000064	 
148   	 000C					.dw  (0x20)
	 000C	 00000020	 
149   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
150   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
151   	 000F					.dw  (0x74)
	 000F	 00000074	 
152   	 0010					.dw  (0x20)
	 0010	 00000020	 
153   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
154   	 0012					.dw  (0x70)
	 0012	 00000070	 
155   	 0013					.dw  (0x65)
	 0013	 00000065	 
156   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
157   	 0015					.dw  (0x20)
	 0015	 00000020	 
158   	 0016					.dw  (0x77)
	 0016	 00000077	 
159   	 0017					.dw  (0x61)
	 0017	 00000061	 
160   	 0018					.dw  (0x76)
	 0018	 00000076	 
161   	 0019					.dw  (0x65)
	 0019	 00000065	 
162   	 001A					.dw  (0x66)
	 001A	 00000066	 
163   	 001B					.dw  (0x69)
	 001B	 00000069	 
164   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
165   	 001D					.dw  (0x65)
	 001D	 00000065	 
166   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
167   	 001F					.dw  (0xa)
	 001F	 0000000A	 
168   	 0020					.dw  (0x0)
	 0020	 00000000	 
169   							.code_ovly
169    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
170   						
171   						
172   						
173   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
174   							.if defined(_OVLY_)
175   								.if .strcmp('standalone',_OVLY_)=0
176   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
177   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
178   	 0000				dummy		.equ(__start)
179   								.else
180   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
181   						dummy		.equ(__intvec)
182   								.endif
183   								.endif
184   							.endif
185   						
186   	 0000				_main:			/* LN: 18 | CYCLE: 0 | RULES: () */ 
187   	 0000	 BB540007		xmem[i7] = i7			# LN: 18 | 
188   	 0001	 020F7FFF		i7 += 1			# LN: 18 | 
189   	 0002	 8775020E		i7 = i7 + (0x20e)			# LN: 18 | 
190   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 18 | 
191   	 0004	 98540001		xmem[i1] = a0h			# LN: 18 | 
192   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 18 | 
193   	 0006	 B0540001		xmem[i1] = i0			# LN: 18 | 
194   	 0007				cline_18_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
195   	 0007	 90750003		i0 = i7 - (0x3)			# LN: 34 | 
196   	 0008	 00004DC0		a0 = 0			# LN: 34 | 
197   	 0009	 98540000		xmem[i0] = a0h			# LN: 34 | 
198   	 000A	 80800026		do (0x8), label_end_93			# LN: 34 | 
199   	 000B				cline_34_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
200   	 000B				label_begin_93:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
201   	 000B	 90750004		i0 = i7 - (0x4)			# LN: 35 | 
202   	 000C	 00004DC0		a0 = 0			# LN: 35 | 
203   	 000D	 98540000		xmem[i0] = a0h			# LN: 35 | 
204   	 000E	 81000020		do (0x10), label_end_92			# LN: 35 | 
205   	 000F				cline_35_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
206   	 000F				label_begin_92:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
207   	 000F	 90750003		i0 = i7 - (0x3)			# LN: 36 | 
208   	 0010	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 36, 36 | 
209   	 0011	 00004EC0		a0 = a0 << 4			# LN: 36 | 
210   	 0012	 48707FFF		i0 = a0			# LN: 36 | 
211   	 0013	 91750004		i1 = i7 - (0x4)			# LN: 36 | 
212   	 0014	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 36 | 
213   	 0015	 88140001		a0 = xmem[i1]			# LN: 36 | 
214   	 0016	 0C707FFF		b0 = i0			# LN: 36 | 
215   	 0017	 00004420		a0 = a0 + b0			# LN: 36 | 
216   	 0018	 98090030		AnyReg(i0, a0h)			# LN: 36 | 
217   	 0019	 00007FFF		nop #empty cycle
218   	 001A	 99D40000		ymem[i0] = a1h			# LN: 36 | 
219   	 001B				cline_36_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
220   	 001B				init_latch_label_0:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
221   	 001B	 90750004		i0 = i7 - (0x4)			# LN: 35 | 
222   	 001C	 88140000		a0 = xmem[i0]			# LN: 35 | 
223   	 001D	 894A0001		uhalfword(a1) = (0x1)			# LN: 35 | 
224   	 001E	 00004408		a0 = a0 + a1			# LN: 35 | 
225   	 001F	 90750004		i0 = i7 - (0x4)			# LN: 35 | 
226   	 0020				label_end_92:			# LN: 35 | CYCLE: 5 | RULES: ()
227   	 0020	 98540000		xmem[i0] = a0h			# LN: 35 | 
228   	 0021				cline_35_1:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
229   	 0021				init_latch_label_1:			/* LN: 38 | CYCLE: 0 | RULES: () */ 
230   	 0021				for_end_1:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
231   	 0021	 90750003		i0 = i7 - (0x3)			# LN: 34 | 
232   	 0022	 88140000		a0 = xmem[i0]			# LN: 34 | 
233   	 0023	 894A0001		uhalfword(a1) = (0x1)			# LN: 34 | 
234   	 0024	 00004408		a0 = a0 + a1			# LN: 34 | 
235   	 0025	 90750003		i0 = i7 - (0x3)			# LN: 34 | 
236   	 0026				label_end_93:			# LN: 34 | CYCLE: 5 | RULES: ()
237   	 0026	 98540000		xmem[i0] = a0h			# LN: 34 | 
238   	 0027				cline_34_1:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
239   	 0027				for_end_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
240   	 0027	 90750104		i0 = i7 - (260 - 0)			# LN: 42 | 
241   	 0028	 A1050000		i1 = (0) + (_string_const_0)			# LN: 42 | 
242   	 0029	 80880000		call (_strcpy)			# LN: 42 | 
243   	 002A				cline_42_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
244   	 002A	 90750104		i0 = i7 - (260 - 0)			# LN: 43 | 
245   	 002B	 80880000		call (_cl_wavread_open)			# LN: 43 | 
246   	 002C	 98090030		AnyReg(i0, a0h)			# LN: 43 | 
247   	 002D	 91750105		i1 = i7 - (0x105)			# LN: 43 | 
248   	 002E	 B0540001		xmem[i1] = i0			# LN: 43 | 
249   	 002F				cline_43_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
250   	 002F	 90750105		i0 = i7 - (0x105)			# LN: 44 | 
251   	 0030	 88140000		a0 = xmem[i0]			# LN: 44 | 
252   	 0031	 00004E80		a0 & a0			# LN: 44 | 
253   	 0032	 84480037		if (a != 0) jmp (else_0)			# LN: 44 | 
254   	 0033				cline_44_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
255   	 0033	 A0050000		i0 = (0) + (_string_const_1)			# LN: 46 | 
256   	 0034	 80880000		call (_printf)			# LN: 46 | 
257   	 0035				cline_46_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
258   	 0035	 886AFFFF		halfword(a0) = (0xffff)			# LN: 47 | 
259   	 0036	 800800D2		jmp (__epilogue_226)			# LN: 47 | 
260   	 0037				cline_47_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
261   	 0037				endif_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
262   	 0037				else_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
263   	 0037	 90750105		i0 = i7 - (0x105)			# LN: 53 | 
264   	 0038	 B0140000		i0 = xmem[i0]			# LN: 53 | 
265   	 0039	 80880000		call (_cl_wavread_getnchannels)			# LN: 53 | 
266   	 003A	 90750106		i0 = i7 - (0x106)			# LN: 53 | 
267   	 003B	 98540000		xmem[i0] = a0h			# LN: 53 | 
268   	 003C				cline_53_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
269   	 003C	 90750105		i0 = i7 - (0x105)			# LN: 54 | 
270   	 003D	 B0140000		i0 = xmem[i0]			# LN: 54 | 
271   	 003E	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 54 | 
272   	 003F	 90750107		i0 = i7 - (0x107)			# LN: 54 | 
273   	 0040	 98540000		xmem[i0] = a0h			# LN: 54 | 
274   	 0041				cline_54_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
275   	 0041	 90750105		i0 = i7 - (0x105)			# LN: 55 | 
276   	 0042	 B0140000		i0 = xmem[i0]			# LN: 55 | 
277   	 0043	 80880000		call (_cl_wavread_frame_rate)			# LN: 55 | 
278   	 0044	 90750108		i0 = i7 - (0x108)			# LN: 55 | 
279   	 0045	 98540000		xmem[i0] = a0h			# LN: 55 | 
280   	 0046				cline_55_0:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
281   	 0046	 90750105		i0 = i7 - (0x105)			# LN: 56 | 
282   	 0047	 B0140000		i0 = xmem[i0]			# LN: 56 | 
283   	 0048	 80880000		call (_cl_wavread_number_of_frames)			# LN: 56 | 
284   	 0049	 90750109		i0 = i7 - (0x109)			# LN: 56 | 
285   	 004A	 98540000		xmem[i0] = a0h			# LN: 56 | 
286   	 004B				cline_56_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
287   	 004B	 90750209		i0 = i7 - (521 - 0)			# LN: 61 | 
288   	 004C	 A1050000		i1 = (0) + (_string_const_2)			# LN: 61 | 
289   	 004D	 80880000		call (_strcpy)			# LN: 61 | 
290   	 004E				cline_61_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
291   	 004E	 90750209		i0 = i7 - (521 - 0)			# LN: 62 | 
292   	 004F	 91750107		i1 = i7 - (0x107)			# LN: 62 | 
293   	 0050	 88140001		a0 = xmem[i1]			# LN: 62 | 
294   	 0051	 894A0005		uhalfword(a1) = (0x5)			# LN: 62 | 
295   	 0052	 91750108		i1 = i7 - (0x108)			# LN: 62 | 
296   	 0053	 8C140001		b0 = xmem[i1]			# LN: 62 | 
297   	 0054	 80880000		call (_cl_wavwrite_open)			# LN: 62 | 
298   	 0055	 98090030		AnyReg(i0, a0h)			# LN: 62 | 
299   	 0056	 9175020A		i1 = i7 - (0x20a)			# LN: 62 | 
300   	 0057	 B0540001		xmem[i1] = i0			# LN: 62 | 
301   	 0058				cline_62_0:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
302   	 0058	 9075020A		i0 = i7 - (0x20a)			# LN: 63 | 
303   	 0059	 88140000		a0 = xmem[i0]			# LN: 63 | 
304   	 005A	 00004E80		a0 & a0			# LN: 63 | 
305   	 005B	 84480060		if (a != 0) jmp (else_1)			# LN: 63 | 
306   	 005C				cline_63_0:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
307   	 005C	 A0050000		i0 = (0) + (_string_const_3)			# LN: 65 | 
308   	 005D	 80880000		call (_printf)			# LN: 65 | 
309   	 005E				cline_65_0:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
310   	 005E	 886AFFFF		halfword(a0) = (0xffff)			# LN: 66 | 
311   	 005F	 800800D2		jmp (__epilogue_226)			# LN: 66 | 
312   	 0060				cline_66_0:			/* LN: 71 | CYCLE: 0 | RULES: () */ 
313   	 0060				endif_1:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
314   	 0060				else_1:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
315   	 0060	 88040000		a0 = xmem[_gainTmp + 0]			# LN: 71 | 
316   	 0061	 89040000		a1 = xmem[_deegreTmp + 0]			# LN: 71 | 
317   	 0062	 A0050000		i0 = (0) + (_inverter)			# LN: 71 | 
318   	 0063	 80880000		call (_audio_invert_init)			# LN: 71 | 
319   	 0064				cline_71_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
320   	 0064	 9075020B		i0 = i7 - (0x20b)			# LN: 82 | 
321   	 0065	 00004DC0		a0 = 0			# LN: 82 | 
322   	 0066	 98540000		xmem[i0] = a0h			# LN: 82 | 
323   	 0067				for_2:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
324   	 0067	 90750109		i0 = i7 - (0x109)			# LN: 82 | 
325   	 0068	 88140000		a0 = xmem[i0]			# LN: 82 | 
326   	 0069	 894A0010		uhalfword(a1) = (0x10)			# LN: 82 | 
327   	 006A	 80880000		call (__div)			# LN: 82 | 
328   	 006B	 9075020B		i0 = i7 - (0x20b)			# LN: 82 | 
329   	 006C	 89140000		a1 = xmem[i0]			# LN: 82 | 
330   	 006D	 00004F01		a1 - a0			# LN: 82 | 
331   	 006E	 84C800CA		if (a >= 0) jmp (for_end_2)			# LN: 82 | 
332   	 006F				cline_82_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
333   	 006F	 9075020C		i0 = i7 - (0x20c)			# LN: 84 | 
334   	 0070	 00004DC0		a0 = 0			# LN: 84 | 
335   	 0071	 98540000		xmem[i0] = a0h			# LN: 84 | 
336   	 0072	 8100009A		do (0x10), label_end_94			# LN: 84 | 
337   	 0073				cline_84_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
338   	 0073				label_begin_94:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
339   	 0073	 9075020D		i0 = i7 - (0x20d)			# LN: 86 | 
340   	 0074	 00004DC0		a0 = 0			# LN: 86 | 
341   	 0075	 98540000		xmem[i0] = a0h			# LN: 86 | 
342   	 0076				for_4:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
343   	 0076	 9075020D		i0 = i7 - (0x20d)			# LN: 86 | 
344   	 0077	 88140000		a0 = xmem[i0]			# LN: 86 | 
345   	 0078	 90750106		i0 = i7 - (0x106)			# LN: 86 | 
346   	 0079	 89140000		a1 = xmem[i0]			# LN: 86 | 
347   	 007A	 00004F08		a0 - a1			# LN: 86 | 
348   	 007B	 84C80095		if (a >= 0) jmp (for_end_4)			# LN: 86 | 
349   	 007C				cline_86_0:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
350   	 007C	 90750105		i0 = i7 - (0x105)			# LN: 88 | 
351   	 007D	 B0140000		i0 = xmem[i0]			# LN: 88 | 
352   	 007E	 80880000		call (_cl_wavread_recvsample)			# LN: 88 | 
353   	 007F	 9075020E		i0 = i7 - (0x20e)			# LN: 88 | 
354   	 0080	 98540000		xmem[i0] = a0h			# LN: 88 | 
355   	 0081				cline_88_0:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
356   	 0081	 9075020D		i0 = i7 - (0x20d)			# LN: 89 | 
357   	 0082	 88140000		a0 = xmem[i0]			# LN: 89 | 
358   	 0083	 00004EC0		a0 = a0 << 4			# LN: 89 | 
359   	 0084	 48707FFF		i0 = a0			# LN: 89 | 
360   	 0085	 9175020C		i1 = i7 - (0x20c)			# LN: 89 | 
361   	 0086	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 89 | 
362   	 0087	 88140001		a0 = xmem[i1]			# LN: 89 | 
363   	 0088	 09707FFF		a1 = i0			# LN: 89 | 
364   	 0089	 00004480		a0 = a1 + a0			# LN: 89 | 
365   	 008A	 98090030		AnyReg(i0, a0h)			# LN: 89 | 
366   	 008B	 9175020E		i1 = i7 - (0x20e)			# LN: 89 | 
367   	 008C	 88140001		a0 = xmem[i1]			# LN: 89 | 
368   	 008D	 98D40000		ymem[i0] = a0h			# LN: 89 | 
369   	 008E				cline_89_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
370   	 008E				init_latch_label_2:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
371   	 008E	 9075020D		i0 = i7 - (0x20d)			# LN: 86 | 
372   	 008F	 88140000		a0 = xmem[i0]			# LN: 86 | 
373   	 0090	 894A0001		uhalfword(a1) = (0x1)			# LN: 86 | 
374   	 0091	 00004408		a0 = a0 + a1			# LN: 86 | 
375   	 0092	 9075020D		i0 = i7 - (0x20d)			# LN: 86 | 
376   	 0093	 98540000		xmem[i0] = a0h			# LN: 86 | 
377   	 0094	 80080076		jmp (for_4)			# LN: 86 | 
378   	 0095				cline_86_1:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
379   	 0095				init_latch_label_3:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
380   	 0095				for_end_4:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
381   	 0095	 9075020C		i0 = i7 - (0x20c)			# LN: 84 | 
382   	 0096	 88140000		a0 = xmem[i0]			# LN: 84 | 
383   	 0097	 894A0001		uhalfword(a1) = (0x1)			# LN: 84 | 
384   	 0098	 00004408		a0 = a0 + a1			# LN: 84 | 
385   	 0099	 9075020C		i0 = i7 - (0x20c)			# LN: 84 | 
386   	 009A				label_end_94:			# LN: 84 | CYCLE: 5 | RULES: ()
387   	 009A	 98540000		xmem[i0] = a0h			# LN: 84 | 
388   	 009B				cline_84_1:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
389   	 009B				for_end_3:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
390   	 009B	 A0050000		i0 = (0) + (_inverter)			# LN: 93 | 
391   	 009C	 80880000		call (_processing)			# LN: 93 | 
392   	 009D				cline_93_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
393   	 009D	 9075020C		i0 = i7 - (0x20c)			# LN: 95 | 
394   	 009E	 00004DC0		a0 = 0			# LN: 95 | 
395   	 009F	 98540000		xmem[i0] = a0h			# LN: 95 | 
396   	 00A0	 810000C2		do (0x10), label_end_96			# LN: 95 | 
397   	 00A1				cline_95_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
398   	 00A1				label_begin_96:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
399   	 00A1	 9075020D		i0 = i7 - (0x20d)			# LN: 97 | 
400   	 00A2	 00004DC0		a0 = 0			# LN: 97 | 
401   	 00A3	 98540000		xmem[i0] = a0h			# LN: 97 | 
402   	 00A4	 805000BC		do (0x5), label_end_95			# LN: 97 | 
403   	 00A5				cline_97_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
404   	 00A5				label_begin_95:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
405   	 00A5	 9075020D		i0 = i7 - (0x20d)			# LN: 99 | 
406   	 00A6	 88140000		a0 = xmem[i0]			# LN: 99 | 
407   	 00A7	 00004EC0		a0 = a0 << 4			# LN: 99 | 
408   	 00A8	 48707FFF		i0 = a0			# LN: 99 | 
409   	 00A9	 9175020C		i1 = i7 - (0x20c)			# LN: 99 | 
410   	 00AA	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 99 | 
411   	 00AB	 88140001		a0 = xmem[i1]			# LN: 99 | 
412   	 00AC	 09707FFF		a1 = i0			# LN: 99 | 
413   	 00AD	 00004480		a0 = a1 + a0			# LN: 99 | 
414   	 00AE	 98090030		AnyReg(i0, a0h)			# LN: 99 | 
415   	 00AF	 9175020E		i1 = i7 - (0x20e)			# LN: 99 | 
416   	 00B0	 88940000		a0 = ymem[i0]			# LN: 99 | 
417   	 00B1	 98540001		xmem[i1] = a0h			# LN: 99 | 
418   	 00B2				cline_99_0:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
419   	 00B2	 9075020A		i0 = i7 - (0x20a)			# LN: 100 | 
420   	 00B3	 9175020E		i1 = i7 - (0x20e)			# LN: 100 | 
421   	 00B4	 88140001		a0 = xmem[i1]			# LN: 100 | 
422   	 00B5	 B0140000		i0 = xmem[i0]			# LN: 100 | 
423   	 00B6	 80880000		call (_cl_wavwrite_sendsample)			# LN: 100 | 
424   	 00B7				cline_100_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
425   	 00B7				init_latch_label_4:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
426   	 00B7	 9075020D		i0 = i7 - (0x20d)			# LN: 97 | 
427   	 00B8	 88140000		a0 = xmem[i0]			# LN: 97 | 
428   	 00B9	 894A0001		uhalfword(a1) = (0x1)			# LN: 97 | 
429   	 00BA	 00004408		a0 = a0 + a1			# LN: 97 | 
430   	 00BB	 9075020D		i0 = i7 - (0x20d)			# LN: 97 | 
431   	 00BC				label_end_95:			# LN: 97 | CYCLE: 5 | RULES: ()
432   	 00BC	 98540000		xmem[i0] = a0h			# LN: 97 | 
433   	 00BD				cline_97_1:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
434   	 00BD				init_latch_label_5:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
435   	 00BD				for_end_6:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
436   	 00BD	 9075020C		i0 = i7 - (0x20c)			# LN: 95 | 
437   	 00BE	 88140000		a0 = xmem[i0]			# LN: 95 | 
438   	 00BF	 894A0001		uhalfword(a1) = (0x1)			# LN: 95 | 
439   	 00C0	 00004408		a0 = a0 + a1			# LN: 95 | 
440   	 00C1	 9075020C		i0 = i7 - (0x20c)			# LN: 95 | 
441   	 00C2				label_end_96:			# LN: 95 | CYCLE: 5 | RULES: ()
442   	 00C2	 98540000		xmem[i0] = a0h			# LN: 95 | 
443   	 00C3				cline_95_1:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
444   	 00C3				init_latch_label_6:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
445   	 00C3				for_end_5:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
446   	 00C3	 9075020B		i0 = i7 - (0x20b)			# LN: 82 | 
447   	 00C4	 88140000		a0 = xmem[i0]			# LN: 82 | 
448   	 00C5	 894A0001		uhalfword(a1) = (0x1)			# LN: 82 | 
449   	 00C6	 00004408		a0 = a0 + a1			# LN: 82 | 
450   	 00C7	 9075020B		i0 = i7 - (0x20b)			# LN: 82 | 
451   	 00C8	 98540000		xmem[i0] = a0h			# LN: 82 | 
452   	 00C9	 80080067		jmp (for_2)			# LN: 82 | 
453   	 00CA				cline_82_1:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
454   	 00CA				for_end_2:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
455   	 00CA	 90750105		i0 = i7 - (0x105)			# LN: 108 | 
456   	 00CB	 B0140000		i0 = xmem[i0]			# LN: 108 | 
457   	 00CC	 80880000		call (_cl_wavread_close)			# LN: 108 | 
458   	 00CD				cline_108_0:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
459   	 00CD	 9075020A		i0 = i7 - (0x20a)			# LN: 109 | 
460   	 00CE	 B0140000		i0 = xmem[i0]			# LN: 109 | 
461   	 00CF	 80880000		call (_cl_wavwrite_close)			# LN: 109 | 
462   	 00D0				cline_109_0:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
463   	 00D0	 00004DC0		a0 = 0			# LN: 112 | 
464   	 00D1	 800800D2		jmp (__epilogue_226)			# LN: 112 | 
465   	 00D2				cline_112_0:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
466   	 00D2				__epilogue_226:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
467   	 00D2	 9775020E		i7 = i7 - (0x20e)			# LN: 113 | 
468   	 00D3	 02177FFF		i7 -= 1			# LN: 113 | 
469   	 00D4	 81880000		ret			# LN: 113 | 
470   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_226                                                                  			         Relocatable         main_GEN_0008:00D2H
__start                                                                         					 External   
_audio_invert_init                                                              					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_deegreTmp                                                                      			  Public Relocatable       main_GEN_0000:0000H
_gainTmp                                                                        			  Public Relocatable       main_GEN_0001:0000H
_inverter                                                                       			  Public Relocatable       main_GEN_0002:0000H
_main                                                                           			  Public Relocatable       main_GEN_0008:0000H
_printf                                                                         					 External   
_processing                                                                     					 External   
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0003:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0004:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0005:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0006:0000H
_string_const_3                                                                 			         Relocatable         main_GEN_0007:0000H
cline_100_0                                                                     			  Unused Relocatable        main_GEN_0008:00B7H
cline_108_0                                                                     			  Unused Relocatable        main_GEN_0008:00CDH
cline_109_0                                                                     			  Unused Relocatable        main_GEN_0008:00D0H
cline_112_0                                                                     			  Unused Relocatable        main_GEN_0008:00D2H
cline_18_0                                                                      			  Unused Relocatable        main_GEN_0008:0007H
cline_34_0                                                                      			  Unused Relocatable        main_GEN_0008:000BH
cline_34_1                                                                      			  Unused Relocatable        main_GEN_0008:0027H
cline_35_0                                                                      			  Unused Relocatable        main_GEN_0008:000FH
cline_35_1                                                                      			  Unused Relocatable        main_GEN_0008:0021H
cline_36_0                                                                      			  Unused Relocatable        main_GEN_0008:001BH
cline_42_0                                                                      			  Unused Relocatable        main_GEN_0008:002AH
cline_43_0                                                                      			  Unused Relocatable        main_GEN_0008:002FH
cline_44_0                                                                      			  Unused Relocatable        main_GEN_0008:0033H
cline_46_0                                                                      			  Unused Relocatable        main_GEN_0008:0035H
cline_47_0                                                                      			  Unused Relocatable        main_GEN_0008:0037H
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0008:003CH
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0008:0041H
cline_55_0                                                                      			  Unused Relocatable        main_GEN_0008:0046H
cline_56_0                                                                      			  Unused Relocatable        main_GEN_0008:004BH
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0008:004EH
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0008:0058H
cline_63_0                                                                      			  Unused Relocatable        main_GEN_0008:005CH
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0008:005EH
cline_66_0                                                                      			  Unused Relocatable        main_GEN_0008:0060H
cline_71_0                                                                      			  Unused Relocatable        main_GEN_0008:0064H
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0008:006FH
cline_82_1                                                                      			  Unused Relocatable        main_GEN_0008:00CAH
cline_84_0                                                                      			  Unused Relocatable        main_GEN_0008:0073H
cline_84_1                                                                      			  Unused Relocatable        main_GEN_0008:009BH
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0008:007CH
cline_86_1                                                                      			  Unused Relocatable        main_GEN_0008:0095H
cline_88_0                                                                      			  Unused Relocatable        main_GEN_0008:0081H
cline_89_0                                                                      			  Unused Relocatable        main_GEN_0008:008EH
cline_93_0                                                                      			  Unused Relocatable        main_GEN_0008:009DH
cline_95_0                                                                      			  Unused Relocatable        main_GEN_0008:00A1H
cline_95_1                                                                      			  Unused Relocatable        main_GEN_0008:00C3H
cline_97_0                                                                      			  Unused Relocatable        main_GEN_0008:00A5H
cline_97_1                                                                      			  Unused Relocatable        main_GEN_0008:00BDH
cline_99_0                                                                      			  Unused Relocatable        main_GEN_0008:00B2H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0008:0037H
else_1                                                                          			         Relocatable         main_GEN_0008:0060H
endif_0                                                                         			  Unused Relocatable        main_GEN_0008:0037H
endif_1                                                                         			  Unused Relocatable        main_GEN_0008:0060H
for_2                                                                           			         Relocatable         main_GEN_0008:0067H
for_4                                                                           			         Relocatable         main_GEN_0008:0076H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0008:0027H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0008:0021H
for_end_2                                                                       			         Relocatable         main_GEN_0008:00CAH
for_end_3                                                                       			  Unused Relocatable        main_GEN_0008:009BH
for_end_4                                                                       			         Relocatable         main_GEN_0008:0095H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0008:00C3H
for_end_6                                                                       			  Unused Relocatable        main_GEN_0008:00BDH
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0008:001BH
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0008:0021H
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0008:008EH
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0008:0095H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0008:00B7H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0008:00BDH
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0008:00C3H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0008:000FH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0008:000BH
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0008:0073H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0008:00A5H
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0008:00A1H
label_end_92                                                                    			         Relocatable         main_GEN_0008:0020H
label_end_93                                                                    			         Relocatable         main_GEN_0008:0026H
label_end_94                                                                    			         Relocatable         main_GEN_0008:009AH
label_end_95                                                                    			         Relocatable         main_GEN_0008:00BCH
label_end_96                                                                    			         Relocatable         main_GEN_0008:00C2H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0002H	 main_GEN_0002                           			 X_OVLY                                  
0080H	 main_GEN_0003                           			 Y_OVLY                                  
0023H	 main_GEN_0004                           			 X_OVLY                                  
0021H	 main_GEN_0005                           			 X_OVLY                                  
001BH	 main_GEN_0006                           			 X_OVLY                                  
0021H	 main_GEN_0007                           			 X_OVLY                                  
00D5H	 main_GEN_0008                           			 CODE_OVLY                               
